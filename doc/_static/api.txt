===
API
===

.. autofunction:: seleshot.create

.. class:: ScreenShot(object):

    .. function:: get_screen(self, url = None):

        Get specified screen(s)
        
        :param url: web page to capture (including http protocol, None to reuse loaded webpage)
        :type url: string
        :returns: Screen shot
        :rtype: ImageContainer
        :raises: Exception

    .. function:: close(self):

        Close

.. class:: ImageContainer(object):

        Container for an image.
        
        Possible positions:
        
        * MIDDLE
        * INSIDE
        * OUTSIDE
        * BORDER
        * LEFT
        * RIGHT
        * TOP
        * BOTTOM
        
        Example of usage::
        
            position = Position.OUTSIDE | Position.LEFT

    .. function:: cut_element(self, id = None, xpath = None):

        Cut one element by id or xpath. After this operation you cannot cut more elements.
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :returns: ImageContainer
        :rtype: ImageContainer
        :raises: RuntimeError, ValueError

    .. function:: cut_area(self, x = 0, y = 0, height = None, width = None):

        Cut area from a given point to a given size (in px)
        
        :param x: x coordinate for a point
        :type x: integer
        :param y: y coordinate for a point
        :type y: integer
        :param height: height of an area
        :type height: integer or None
        :param width: width of an area
        :type width: integer or None
        :returns: ImageContainer
        :rtype: ImageContainer

    .. function:: draw_dot(self, id = None, xpath = None, coordinates = None, padding = 0, color = None, size = None):

        For id and xpath:
            Draw a red dot on a given position of a given element.
        For coordinates:
            Draw a red dot in a given point (x, y)
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :param coordinates: coordinates = (x, y) - center of a dot
        :type coordinates: tuple of integers (x, y)
        :param position: position of a dot
        :type position: Position enum
        :param padding: padding between dot and element
        :type padding: tuple of integers (x, y)
        :param color: color of dot
        :type color: color object or string
        :param size: size of dot
        :type size: integer
        :returns: ImageContainer
        :rtype: ImageContainer
        :raises: ValueError

    .. function:: draw_frame(self, id = None, xpath = None, coordinates = None, padding = None, color = None, size = None):

        For id and xpath:
            Draw a frame around a given element
        For coordinates:
            Draw a frame for a given coordinates
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :param coordinates: coordinates for a frame - coordinates = (x, y, width, height) - middle of a dot
        :type coordinates: tuple of integers - (x, y, width, height)
        :param padding: padding between frame and element
        :type padding: tuple of integers (x, y)
        :param color: color of frame
        :type color: color object or string
        :param size: size of frame (thickness)
        :type size: integer
        :returns: ImageContainer
        :rtype: ImageContainer
        :raises: ValueError

    .. function:: draw_image(self, id = None, xpath = None, coordinates = None, position = Position.MIDDLE, padding = (0, 0), filename = None, image = None):

        For id and xpath:
            Draw an image on a given position of a given element.
        For coordinates:
            Draw an image in a given point (x, y)
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :param coordinates: coordinates = (x, y) - center of an image
        :type coordinates: tuple of integers (x, y)
        :param position: position of an image
        :type position: Position enum
        :param padding: padding between dot and element
        :type padding: tuple of integers (x, y)
        :param filename: filename of the image file
        :type filename: string
        :param image: reference to Image object
        :type image: Image object
        :returns: ImageContainer
        :rtype: ImageContainer
        :raises: ValueError

    .. function:: draw_zoom(self, id = None, xpath = None, coordinates = None, position = Position.MIDDLE, padding = (0, 0), zoom = None):

        For id and xpath:
            Draw a zoomed image on a given position of a given element.
        For coordinates:
            Draw a zoomed element in a given point (x, y).
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :param coordinates: coordinates = (x, y) - center of a zoomed image
        :type coordinates: tuple of integers (x, y)
        :param position: position of a zoomed image
        :type position: Position enum
        :param padding: padding between dot and element
        :type padding: tuple of integers (x, y)
        :param zoom: zoom size of an element
        :type zoom: integer
        :returns: ImageContainer
        :rtype: ImageContainer

    .. function:: draw_blur(self, id = None, xpath = None):

        Blur whole area of the screenshot except a given element.
        
        :param id: id of a given element
        :type id: string
        :param xpath: xpath of a given element
        :type xpath: string
        :returns: ImageContainer
        :rtype: ImageContainer
        :raises: RuntimeError, ValueError

    .. function:: save(self, filename):

        Save to a filename
        
        :param filename: name of a file
        :type filename: string
        :returns: ImageContainer
        :rtype: ImageContainer

    .. function:: is_cut(self):

        If True, then there is possibility to cut an element.
        If False, then there is not possibility to cut any element.
        
        :returns: possibility to cut
        :rtype: boolean

    .. function:: close(self):

        Close the ImageContainer object

